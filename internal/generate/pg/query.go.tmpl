package {{.PackageName}}

import (
  _ "embed"
  "fmt"
  "strings"
  {{- range .Imports }}
  "{{ . }}"
  {{- end }}
)

{{ with .Query }}
{{- $camelName := .CamelName }}
{{- $argsType := printf "%sArgs" .PascalName }}
{{- $resultType := printf "%sResult" .PascalName }}
type {{ $argsType }} struct {
  {{- range .Params }}
  {{ .Name }} {{ .Type.GoType }} `db:"{{ .Column.ColumnName }}" json:"{{ .Column.ColumnName }}"`
  {{- end }}
}

func (args *{{ $argsType }}) String() string {
  content := strings.Join(
    []string{
    {{- range .Params }}
      fmt.Sprintf("{{ .Name }}: %v", {{ if .Type.IsPointer }}*{{ end }}args.{{ .Name }}),
    {{- end }}
    },
    ", ",
  )

  return fmt.Sprintf("{{ $argsType }}{%s}", content)
}

func (args *{{ $argsType }}) Query(db {{ .StorePackageName }}.Database) ([]*{{ $resultType }}, error) {
  return {{ .StorePackageName }}.Query[*{{ $resultType }}](db, args)
}

func (args *{{ $argsType }}) Sql() string {
  return {{ .CamelName }}Sql
}

type {{ $resultType }} struct {
  {{- range .Fields }}
  {{ .Name }} {{ .Type.GoType }} `db:"{{ .Column.ColumnName }}" json:"{{ .Column.ColumnName }}"`
  {{- end }}
}

func (result *{{ $resultType }}) String() string {
  content := strings.Join(
    []string{
    {{- range .Fields }}
      fmt.Sprintf("{{ .Name }}: %v", {{ if .Type.IsPointer }}*{{ end }}result.{{ .Name }}),
    {{- end }}
    },
    ", ",
  )

  return fmt.Sprintf("{{ $resultType }}{%s}", content)
}

//go:embed {{ .Filename }}
var {{ .CamelName }}Sql string
{{ end }}
