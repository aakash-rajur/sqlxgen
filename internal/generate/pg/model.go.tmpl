package {{.PackageName}}

import (
  "fmt"
  "strings"
  {{- range .Imports }}
  "{{ . }}"
  {{- end }}
)

{{- $insertFields := .InsertFields }}
{{- $updateFields := .UpdateFields }}
{{- $selectFields := .SelectFields }}
{{ with .Model }}
{{- $fields := .Fields }}
{{- $pkFields := .PkFields }}
{{- $camelName := .CamelName }}
{{- $receiverName := (slice $camelName 0 1) }}
type {{ .PascalName }} struct {
  {{- range .Fields }}
    {{ .Name }} {{ .Type.GoType }} `db:"{{ .Column.ColumnName }}" json:"{{ .Column.ColumnName }}"`
  {{- end }}
}

func ({{ $receiverName }} *{{ .PascalName }}) String() string {
  content := strings.Join(
    []string{
      {{- range .Fields }}
        {{- if eq .Column.Type "interface{}" "point"  "array" "geography" "hstore" }}
        // fmt.Sprintf("{{ .Name }}: %v", {{ if .Type.IsPointer }}*{{ end }}{{ $receiverName }}.{{ .Name }}),
        {{- else }}
        fmt.Sprintf("{{ .Name }}: %v", {{ if .Type.IsPointer }}*{{ end }}{{ $receiverName }}.{{ .Name }}),
        {{- end }}
      {{- end }}
      },
      ", ",
    )

  return fmt.Sprintf("{{ .PascalName }}{%s}", content)
}

func ({{ $receiverName }} *{{ .PascalName }}) TableName() string {
  return "{{ .Table.SchemaName }}.{{ .Table.TableName }}"
}

func ({{ $receiverName }} *{{ .PascalName }}) PrimaryKey() []string {
return []string{
    {{- range .PkFields }}
    "{{ .Column.ColumnName }}",
    {{- end }}
  }
}

func ({{ $receiverName }} *{{ .PascalName }}) InsertQuery() string {
  return {{ .CamelName }}InsertSql
}

func ({{ $receiverName }} *{{ .PascalName }}) UpdateQuery() string {
  return {{ .CamelName }}UpdateSql
}

func ({{ $receiverName }} *{{ .PascalName }}) FindFirstQuery() string {
  return {{ .CamelName }}FindFirstSql
}

func ({{ $receiverName }} *{{ .PascalName }}) FindByPkQuery() string {
  return {{ .CamelName }}FindByPkSql
}

func ({{ $receiverName }} *{{ .PascalName }}) CountQuery() string {
  return {{ .CamelName }}CountSql
}

func ({{ $receiverName }} *{{ .PascalName }}) FindAllQuery() string {
  return {{ .CamelName }}FindAllSql
}

func ({{ $receiverName }} *{{ .PascalName }}) DeleteByPkQuery() string {
  return {{ .CamelName }}DeleteByPkSql
}

func ({{ $receiverName }} *{{ .PascalName }}) DeleteQuery() string {
  return {{ .CamelName }}DeleteSql
}

// language=postgresql
var {{ .CamelName }}InsertSql = `
INSERT INTO {{ .Table.SchemaName }}.{{ .Table.TableName }}(
{{- range $i, $f := $insertFields }}
  {{- if not $f.Column.Generated }}
  {{ $f.Column.ColumnName }}{{ if not (isLast $i $insertFields) }},{{ end }}
  {{- end }}
{{- end }}
)
VALUES (
{{- range $i, $f := $insertFields }}
  {{- if not .Column.Generated }}
  :{{ .Column.ColumnName }}{{ if not (isLast $i $insertFields) }},{{ end }}
  {{- end }}
{{- end }}
)
RETURNING
{{- range $i, $f := $selectFields }}
  {{ $f.Column.ColumnName }}{{ if not (isLast $i $selectFields) }},{{ end }}
{{- end }};
`

// language=postgresql
var {{ .CamelName }}UpdateSql = `
UPDATE {{ .Table.SchemaName }}.{{ .Table.TableName }}
SET
{{- range $i, $f := $updateFields }}
  {{ $f.Column.ColumnName }} = :{{ $f.Column.ColumnName }}{{ if not (isLast $i $updateFields) }},{{ end }}
{{- end }}
WHERE TRUE
{{- range .PkFields }}
  AND {{ .Column.ColumnName }} = :{{ .Column.ColumnName }}
{{- end }}
RETURNING
{{- range $i, $f := $selectFields }}
  {{ $f.Column.ColumnName }}{{ if not (isLast $i $selectFields) }},{{ end }}
{{- end }};
`

// language=postgresql
var {{ .CamelName }}AllFieldsWhere = `
WHERE TRUE
{{- range $selectFields }}
  AND (CAST(:{{ .Column.ColumnName }} AS {{ .Column.Type | ToUpper }}) IS NULL or {{ .Column.ColumnName }} = :{{ .Column.ColumnName }})
{{- end }}
`

// language=postgresql
var {{ .CamelName }}PkFieldsWhere = `
WHERE TRUE
{{- range $pkFields }}
  AND {{ .Column.ColumnName }} = :{{ .Column.ColumnName }}
{{- end }}
`

// language=postgresql
var {{ .CamelName }}FindFirstSql = `
SELECT
{{- range $i, $f := $selectFields }}
  {{ $f.Column.ColumnName }}{{ if not (isLast $i $selectFields) }},{{ end }}
{{- end }}
FROM {{ .Table.SchemaName }}.{{ .Table.TableName }}
` + {{ .CamelName }}AllFieldsWhere + " LIMIT 1;"

// language=postgresql
var {{ .CamelName }}FindByPkSql = `
SELECT
{{- range $i, $f := $selectFields }}
  {{ $f.Column.ColumnName }}{{ if not (isLast $i $selectFields) }},{{ end }}
{{- end }}
FROM {{ .Table.SchemaName }}.{{ .Table.TableName }}
` + {{ .CamelName }}PkFieldsWhere + " LIMIT 1;"


// language=postgresql
var {{ .CamelName }}CountSql = `
SELECT count(*) as count
FROM {{ .Table.SchemaName }}.{{ .Table.TableName }}
` + {{ .CamelName }}AllFieldsWhere + ";"

// language=postgresql
var {{ .CamelName }}FindAllSql = `
SELECT
{{- range $i, $f := $selectFields }}
  {{ $f.Column.ColumnName }}{{ if not (isLast $i $selectFields) }},{{ end }}
{{- end }}
FROM {{ .Table.SchemaName }}.{{ .Table.TableName }}
` + {{ .CamelName }}AllFieldsWhere + ";"

// language=postgresql
var {{ .CamelName }}DeleteByPkSql = `
DELETE FROM {{ .Table.SchemaName }}.{{ .Table.TableName }}
WHERE TRUE
{{- range $pkFields }}
  AND {{ .Column.ColumnName }} = :{{ .Column.ColumnName }}
{{- end }};
`

// language=postgresql
var {{ .CamelName }}DeleteSql = `
DELETE FROM {{ .Table.SchemaName }}.{{ .Table.TableName }}
WHERE TRUE
{{- range $i, $selectFields }}
  {{ if not (isFirst $i) }}AND{{ end }} {{ .Column.ColumnName }} = :{{ .Column.ColumnName }}
{{- end }};
`

{{- end }}
